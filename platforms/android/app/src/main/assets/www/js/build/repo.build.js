"use strict";(self.webpackChunkcom_foxdebug_acode=self.webpackChunkcom_foxdebug_acode||[]).push([[150],{63539:function(e,t,a){a.r(t),a.d(t,{default:function(){return g}});var n=a(8187),r=a.n(n),s=a(53124),i=a(80983),o=a(73305),c=a(34325),l=a(50673),d=a(15423),h=a(2802),p=a(40030);function g(e,t){let a;const n=r().parse("<div class='main' id='repo-tree'>\r\n  <div class='navigation'></div>\r\n</div>"),g=n.querySelector(".navigation"),m=d.Z.GitHub().getRepo(e,t),u=r()("span",{className:"icon search",attr:{action:"search"}});let f,b={"/":{name:"/",sha:"/",list:[]}},v={list:[],name:"",sha:"",scroll:0};const Z=[],y={id:"from",placeholder:strings["use branch"],hints:e=>{e(Z.slice(0,-1))},type:"text"},k={id:"branch",placeholder:strings["new branch"],type:"text",match:/^[a-z\-_0-9]+$/i},w=[];let x=!1;function S(){l.Z.loader.create(t,strings.loading+"..."),m.getSha(f,"").then((e=>{const s=D(e.data);a=(0,o.Z)(t+` (${f})`,{lead:r()("span",{className:"icon clearclose",attr:{action:"close"}})}),b["/"].list=s,A("/","/"),a.addEventListener("click",F),a.body=n,a.header.append(u),app.append(a),c.Z.showAd(),actionStack.setMark(),actionStack.push({id:"repo",action:a.hide}),a.onhide=function(){c.Z.hideAd(x),actionStack.pop(),a.removeEventListener("click",F),actionStack.clearFromMark(),actionStack.remove("repo")}})).catch((e=>{c.Z.error(e)})).finally((()=>{l.Z.loader.destroy()}))}function F(r){const s=r.target,o=s.getAttribute("action");o&&function(r,s){const o=s.getAttribute("sha"),d=s.getAttribute("name");switch(r){case"close":a.hide();break;case"navigate":A(d,o);break;case"file":!async function(){try{c.Z.showTitleLoader();const n=c.Z.extname(d),r=i.lookup(n),s=/image/i.test(r)?"image":null;let h=(await m.getBlob(o,"blob")).data;if("image"===s)return void l.Z.box(d,`<img src='${URL.createObjectURL(h)}'>`);if(h instanceof Blob)try{h=h.text?await h.text():await c.Z.blob2text(h)}catch(e){console.error(e),l.Z.alert(strings.error,strings["unable to open file"])}const g=gitRecord.add({sha:o,data:h,name:d,branch:f,repo:t,path:w.slice(1).join("/"),owner:e});x=!0,new p.Z(d,{type:"git",record:g,text:h,isUnsaved:!1}),a.hide()}catch(e){T(e)}finally{c.Z.removeTitleLoader()}}();break;case"search":(0,h.Z)(n.get(".list"))}}(o,s)}function L({list:e,scroll:t=0}){const a=n.get(".list");a&&a.remove();const i=r().parse(s.Z.render('<div class="list" id="repo-list" empty-message="{{msg}}">{{#list}}{{#.}}\r\n  <div class="list-item" sha="{{sha}}" name="{{name}}"\r\n    action="{{#isDirectory}}navigate{{/isDirectory}}{{#isFile}}file{{/isFile}}">\r\n    <span class="icon {{icon}}"></span>\r\n    <span class="container">\r\n      <div class="text">\r\n        <span>{{name}}</span>\r\n      </div>\r\n      {{#isFile}}\r\n      <small class="value">{{size}}</small>\r\n      {{/isFile}}\r\n    </span>\r\n  </div>\r\n  {{/.}}{{/list}}\r\n</div>',{msg:strings["empty folder message"],list:e}));n.append(i),i.scrollTop=t}async function A(e,t){const a=g.get(`[sha="${t}"]`);if(a){let n,r=null;for(;(n=g.lastChild)!==a;){const e=n.getAttribute("sha");actionStack.remove(e),n.remove(),w.pop(),r&&r in b&&delete b[r],r=e}const s=await B(e,t);return s?(L(s),void(v=s)):void L({list:[],scroll:0})}const s=await B(e,t);if(s){const a=n.get(".list");a&&(v.scroll=a.scrollTop),w.push(e),g.append(r()("span",{className:"nav",attr:{sha:t,action:"navigate",text:e,name:e}})),g.scrollLeft=g.scrollWidth;const{sha:i,name:o}=v;i&&o&&actionStack.push({id:t,action:function(){A(o,i)}}),L(s),b[t]=s,v=s}}async function B(e,a){if(a in b)return b[a];let n=null;l.Z.loader.create(t,strings.loading+"...");try{const t=await m.getTree(a);let{tree:r}=t.data;r=D(r),n={list:r,name:e,sha:a,scroll:0}}catch(e){T(e)}return l.Z.loader.destroy(),n}function D(e){return e.map((e=>{const{size:t,type:a}=e;e.size=(t/1024).toFixed(2)+"KB",!e.name&&e.path&&(e.name=e.path),e.isDirectory="dir"===a||"tree"===a,e.isFile=!e.isDirectory,e.type=e.isDirectory?"folder":c.Z.getIconForFile(e.name)})),c.Z.sortDir(e,{showHiddenFiles:!0,sortByName:!0})}function T(e){console.error(e),actionStack.pop(),l.Z.alert(strings.error,e.toString())}l.Z.loader.create(t,strings.loading+"..."),m.listBranches().then((e=>(l.Z.loader.destroy(),e.data.map((e=>Z.push(e.name))),Z.push(["add",strings["new branch"],"add"]),l.Z.select(strings["select branch"],Z)))).then((e=>{"add"===e?l.Z.multiPrompt(strings["create new branch"],[y,k]).then((e=>{const t=e.from;return f=e.branch,l.Z.loader.create("",strings.loading+"..."),m.createBranch(t,f)})).then(S).catch((e=>{c.Z.error(e)})).finally((()=>{l.Z.loader.destroy()})):(f=e,S())})).catch((e=>{c.Z.error(e),l.Z.loader.destroy()}))}}}]);